#! /usr/bin/python

"""

ms2diploid

This script processes the output of an ms simulation and yields five
different files: One file contains the first four chromosomes in each ms
sample simulating two diploid individuals (a study subject and a control 
individual, not produced by default), indicating if the alleles present on them
are in an ancestral (A) or polymorphic (T) state. The second file is a matrix 
showing the state of the segregating sites in the rest of the chromosomes in an
impute haplotype format. The third file is an impute legend. The program 
creates a specified number of libraries (default: 1 for each individual)for
both the diploid and the control individuals by randomly deleting SNP 
segregating sites (default, preserves 1 in every 100 SNP sites for each
chromosome). The fifth file (not created by default) stores the position of 
each segregating sites). All the files display only information from the 
segregating sites that appear at least in one library (whether it is from the
diploid or the control individual does not matter).

Carlos Fernando Buen Abad Najar
Latest update: Thu Jul 24, 2014.

"""

import optparse
import sys
import ms
import random

def translate_pos( ms_sample, seg_len ):
    '''Thanslates the position of each segregating site according to the number
    of base pairs in the sequence. It avoids double hits'''
    if ms_sample.nsites > seg_len: #if there are more positions that base pairs,
        seg_len = ms_sample.nsites #it increases the number of base pairs
    trans_pos = [ int( float(pos) * seg_len ) for pos in ms_sample.pos ] 
    for position in trans_pos: #cleans double hits
        nxt = trans_pos.index(position)
        for next_pos in trans_pos[(trans_pos.index(position) + 1) :]:
            nxt += 1
            if next_pos == position:
                trans_pos[nxt] = position + 1
    return trans_pos

def transposer( ms_sample, indv, minimo ): 
    '''Takes the first four chromosomes out of the ms genotyoe matrix and
    translates them to an A and T format. The rest of the ms genotype matrix
    rows are transposed into an impute haplotype matrix'''
    dip1 = list() #Lists with the first four haplotypes
    dip2 = list()
    con1 = list()
    con2 = list()
    haplotype = list() #Rest of the haplotypes (for the impute matrix)
    new_sites = list() #Sites that are going to be considered
    for site in range( ms_sample.nsites ):
        zeros = 0
        ones = 0
        for i in indv:
            if i > 3:
                if ms_sample.genotypes[i][site] == '0':
                    zeros += 1
                else:
                    ones += 1
        judgement = float(min(zeros, ones))/max(zeros, ones)
        if judgement >= minimo:    #checks if the alleles have the minimum freq
            new_sites.append(site) 
    for new in new_sites: #only the sites that have the min allele freq
        di_co = list()
        hap = list()
        for i in indv:
            if i < 4: #stores the first four ms haplotypes with A or T
                di_co.append( ms_sample.genotypes[i][new] )
                if di_co[i] == '0':
                    di_co[i] = 'A'
                else:
                    di_co[i] = 'T'
            else:
                hap.append( ms_sample.genotypes[i][new] ) #rest of the matrix
        dip1.append( di_co[0] )
        dip2.append( di_co[1] )
        con1.append( di_co[2] )
        con2.append( di_co[3] )
        haplotype.append( ' '.join( hap ) )
    dip_con = [ dip1, dip2, con1, con2 ]
    return [ dip_con, haplotype, new_sites ]
    
def library_generator(top, ind1, ind2, i):
    '''Randomly chooses if it stores the information of the SNP in position i
    from one of the chromosomes (ind1) or the other (ind2). If it does not 
    store any information, it returns a dot.'''
    magic_number = random.randint(1, top)
    dice1 = random.randint(1, top)
    dice2 = random.randint(1, top)
    if (dice1 == magic_number) and (dice2 != magic_number):
        return ind1[i]
    elif (dice2 == magic_number) and (dice1 != magic_number):
        return ind2[i]
    else:
        return '.'

def libraries( dip_con, top, lib_num, lnew_sites ):
    '''Creates the diploid and control libraries from the diploid genomes'''
    dip1 = dip_con[0] #test individual haplotype 1
    dip2 = dip_con[1] #test individual haplotype 2
    con1 = dip_con[2] #control individual haplotype 1
    con2 = dip_con[3] #control individual haplotype 2
    dip_libraries = []
    con_libraries = []
    delete_rows = [] #sites with no information in any library
    for i in range(lnew_sites):
        dip_row = []
        for lib in range(lib_num[0]):
            apex = library_generator(top, dip1, dip2, i)
            dip_row.append(apex)
        con_row = []
        for lib in range(lib_num[1]):
            apex = library_generator(top, con1, con2, i)
            con_row.append(apex)
        dip_libraries.append(dip_row)
        con_libraries.append(con_row)
        if dip_row == lib_num[0]*['.'] and con_row == lib_num[1]*['.']:
            delete_rows.append(i)
    return [dip_libraries, con_libraries, delete_rows]

def impute_creator( ms_sample, indv, seg_len, sim_num, seg_num, top, lib_num, minimo ):
    '''Creates the libraries, legend, position and haplotype strings'''
    trans_pos = translate_pos( ms_sample, seg_len )
    mult = sim_num - 1
    legend = ''
    library = ''
    dip_con = ''
    haplotype = ''
    new_pos = []
    dip_hap = transposer( ms_sample, indv, minimo )
    new_sites = dip_hap[2] #sites with minimum frequency
    lnew_sites = len(new_sites) 
    lib = libraries( dip_hap[0], top, lib_num, lnew_sites )
    for i in range(lnew_sites): #only sites with minimum allele frequency
        if not(i in lib[2]): #only sites with information in at least one library
            dip_con += ( dip_hap[0][0][i] + ' ' + dip_hap[0][1][i] + '\t' +
            dip_hap[0][2][i] + ' ' + dip_hap[0][3][i] + '\n' )
            position = str(( 1000000 * mult ) + trans_pos[new_sites[i]])
            legend += ( 'sim%d_seg%d' % ( sim_num, new_sites[i] + 1 ) + 
            ' ' + position + ' A T\n' )
            library += ( 'chr1' + '\t' + position + '\tA\tT\t' + 
            '\t'.join(lib[0][i]) + '\t' + '\t'.join(lib[1][i]) + '\n' )
            haplotype += dip_hap[1][i] + '\n'
            new_pos.append(str(position))
            seg_num += 1
    dip_hap[0] = dip_con
    dip_hap[1] = haplotype
    translated_pos = '\n'.join( new_pos )+'\n'
    return (dip_hap, legend, library, translated_pos, seg_num)

def filer(resultados, f_names):
    '''Stores the information in different files'''
    for i in range(5):
        if f_names[i] != 'nofile':
            new_file = open(f_names[i], "w")
            new_file.write(resultados[i])
            new_file.close()

def process_ms_results( ms_file, f_names, probability, lib_num, minimo ):
    '''Takes the ms output and calls all the functions to process it'''
    # number of bases is specified '-r [rho] [nsites]'
    seg_len = int( ms_file.args['r'][0].split()[1] )
    ms_sample = ms_file.next_sim()
    pops = ms_file.pop_sizes()
    indv = ( range(sum(pops) ) )
    diplotype = ''
    haplotype = ''
    legend = ''
    library = ''
    translated_pos = ''               
    legend = "ID pos allele0 allele1\n"
    sim_num = 1
    seg_num = 0
    top = int(1/probability)
    total_size = 0
    while ms_sample is not None:
        total_size += ms_sample.nsites
        result = impute_creator( ms_sample, indv, seg_len, 
                                 sim_num, seg_num, top, lib_num, minimo )
        diplotype += result[0][0]
        haplotype += result[0][1]
        legend += result[1]
        library += result[2]
        translated_pos +=  result[3]
        seg_num = result[4]
        ms_sample = ms_file.next_sim()
        sim_num += 1
    resultados = [haplotype, legend, 
                  library, diplotype, translated_pos]
    filer(resultados, f_names)
    seg_freq = float(seg_num)/total_size
    print '\n#Probability of an allele to be preserved', probability
    print '\n#Calculated probability of a segregating site to be shown in one library', 2*(1-probability)*probability
    print '\n#Fraction of shown segregating sites', seg_freq

def main(argv=None):
        
    if argv is None:
        argv = sys.argv

    usage = 'ms_impute [OPTIONS] [ms_output_file]'
    parser = optparse.OptionParser(usage=usage)
    
    parser.add_option('-n', '--names', nargs= 5, default= 'impute.hap '
                      'impute.legend ' 'library ' 'nofile ' 'nofile',
                      dest='f_names', help='Enter the name of the 5 files' + 
                      ' in the following order: haploid matrix file,' + 
                      ' legend file, library file, diplotype, positions' + 
                      ' file. Type "nofile" to avoid creating the file.')

    parser.add_option('-p', '--prob', default=0.01, type='float', 
                      dest='probability', help='Probability to preserve' + 
                      ' a nucleotide in the haplotype (max=0.5)')

    parser.add_option('-d', '--dip', default=1, type='int', dest='dip_num',
                      help='Enter the number of libraries from the diploid' + 
                      ' individual')

    parser.add_option('-c', '--con', default=1, type='int', dest='con_num',
                      help='Enter the number of libraries from the control' + 
                      ' individual')

    parser.add_option('-m', '--minfreq', default=0.1, dest='min_freq',
                      help='Determine the minimun frequency an allele has to' +
                      ' have in the population in order to be considered')

    (options, args) = parser.parse_args()

    # Read from standard in by default.
    ms_in = sys.stdin

    if len(args) > 0:
        ms_in = open(args[0],'r')

    ms_file = ms.MSResult( ms_in )

    f_names = options.f_names.split(' ')

    lib_num = [options.dip_num, options.con_num]

    minimo = float(options.min_freq)

    process_ms_results( ms_file, f_names, options.probability, lib_num, minimo )

    ms_in.close()
    return 0

if __name__ == "__main__":
    sys.exit(main())

    
    
